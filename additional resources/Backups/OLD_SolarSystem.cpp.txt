#include "SolarSystem.h"
#include "Matrix3D.h"
#include "Vector 2.h"

float SolarSystem::orbitLenDecrease  = 10;
float SolarSystem::SizeDecrease = 5;
float SolarSystem::orbitAcc = 10;
Shape SolarSystem::thisStyle(RGB(0,255,0),
	3,
	Vector2D(-5,-2),
	Vector2D( 5,-2),
	Vector2D( 0,13)
);
void SolarSystem::draw(Core::Graphics& graphics,const Matrix3D& transform, int depth) {
	if(depth==0) thisStyle.draw(graphics,transform);
	else {
		float index = maxDepth - depth;
		float averageAngle = anglesInCircle / children;
		for(int i=0;i<children;i++) {
			Matrix3D currentTrans = transform
									* Matrix3D::rotationMatrix(orbitAngle + i * averageAngle)
									* Matrix3D::translate(Vector2D(0,orbitLength - index * orbitLenDecrease))
									* Matrix3D::scale(size - index * SizeDecrease);
			thisStyle.draw(graphics,currentTrans);
			draw(graphics,currentTrans,depth-1);
		}
	}
}
/*
 {
		int index = maxDepth - depth;
		if(depth == 0) thisStyle.draw(graphics,transform * Matrix3D::scale(size-index*SizeDecrease));
		else {
			float averageAngle = anglesInCircle/children;
			for(int i=0;i<children;i++) {
				Matrix3D currentTransform = Matrix3D::rotationMatrix(orbitAngle + i*averageAngle) * Matrix3D::translate(Vector2D(orbitLength + i*orbitLenDecrease));
				draw(graphics,transform * currentTransform,depth-1);
			}
		}
	}
//*/